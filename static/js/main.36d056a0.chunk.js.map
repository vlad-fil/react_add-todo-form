{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","services/user.ts","components/TodoForm/TodoForm.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","completed","title","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","TodoForm","onSubmit","useState","setTitle","titleError","setTitleError","setUserId","userIdError","setUserIdError","action","method","event","preventDefault","htmlFor","type","value","placeholder","onChange","target","required","inirialTodo","getNewId","Math","max","App","setTodos","newTodo","prev","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.36d056a0.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/User';\nimport './UserInfo.scss';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import React from 'react';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\nimport './TodoInfo.scss';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    key={todo.id}\n    className={`TodoInfo ${todo.completed && 'TodoInfo--completed'}`}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n\n    {todo.user && <UserInfo user={todo.user} />}\n  </article>\n);\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import usersFromServer from '../api/users';\n\nexport function getUserById(userId: number) {\n  return usersFromServer.find(user => user.id === userId) || null;\n}\n","import React, { useState } from 'react';\nimport usersFromServer from '../../api/users';\nimport { getUserById } from '../../services/user';\nimport './TodoForm.scss';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  onSubmit: (todo: Todo) => void;\n};\n\nexport const TodoForm: React.FC<Props> = ({ onSubmit }) => {\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [userIdError, setUserIdError] = useState(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setTitleError(false);\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setUserIdError(false);\n  };\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n    setTitleError(false);\n    setUserIdError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setTitleError(!title);\n    setUserIdError(!userId);\n\n    if (!userId || !title) {\n      return;\n    }\n\n    onSubmit({\n      id: 0,\n      title,\n      userId,\n      completed: false,\n      user: getUserById(userId),\n    });\n\n    reset();\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\">\n        <label htmlFor=\"field_title\">Title: </label>\n        <input\n          type=\"text\"\n          data-cy=\"titleInput\"\n          value={title}\n          id=\"field_title\"\n          placeholder=\"Enter a title\"\n          onChange={handleTitleChange}\n        />\n        {titleError && <span className=\"error\">Please enter a title</span>}\n      </div>\n\n      <div className=\"field\">\n        <label htmlFor=\"field_user\">User: </label>\n        <select\n          data-cy=\"userSelect\"\n          value={userId}\n          id=\"field_user\"\n          required\n          onChange={handleUserIdChange}\n        >\n          <option value=\"0\">Choose a user</option>\n          {usersFromServer.map(user => (\n            <option\n              key={user.id}\n              value={user.id}\n            >\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {userIdError && <span className=\"error\">Please choose a user</span>}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { TodoForm } from './components/TodoForm';\nimport { getUserById } from './services/user';\nimport { Todo } from './types/Todo';\n\nconst inirialTodo: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nfunction getNewId(todos: Todo[]) {\n  const maxId = Math.max(...todos.map(todo => todo.id));\n\n  return maxId + 1;\n}\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>(inirialTodo);\n\n  const addTodo = (todo: Todo) => {\n    const newTodo = {\n      ...todo,\n      id: getNewId(todos),\n    };\n\n    setTodos(prev => [...prev, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm onSubmit={addTodo} />\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}